import os
import numpy as np
from ase import geometry
import ase
import argparse
import subprocess
import shutil

import INCAR_maker
import POSCAR_maker
import POSCAR_reader
import POTCAR_maker


def single_run(def_type, def_matrix):
    """Creates files for a single VASP run, executes job and cleans up"""

    path_to_calc = path + def_type + "/"
    os.mkdir(path_to_calc)
    POSCAR_maker.writer(path_to_calc, poscar_content, def_matrix)
    INCAR_maker.writer(path_to_calc, poscar_content)
    POTCAR_maker.writer(path_to_calc, poscar_content)
    # job maker
    # run job :: either through a shell script subprocess.call(['./test.sh'])  or custodian package
    # save important results
    # os.remdir(path_to_calc)

def undeformed_lattice():
    """Creates all necessary files to run a VASP job for initial undeformed structure"""

    deformation_type = "undeformed"
    deformation_matrix = [[1,1,1],[1,1,1],[1,1,1]]
    single_run(deformation_type, deformation_matrix)

def deformed_lattice(lattice_type):
    """Takes lattice type as argument and depending on symmetry creates all necessary files to run VASP jobs for all possible independent deformations.

    For questions concerning this section one should consult bravais_lattice.pdf that contains info on lattice vectors
    for primitive cells of all 14 types. The deformation matrix is determined in a way to certainly add deformation to
    either 'a', 'b' or 'c' parameter and extra unneeded multipliers 'n' would be removed upon multiplication with actual
    lattice matrix in POSCAR_maker.py. e.g.:
     deformation matrix          primitive lattice matrix                                       deformed lattice matrix
    [[n,n,n],[1,1,1],[1,1,1]] * [[3,0,3],[2,0,2],[0,0,1]] = [[3*n,0*n,3*n],[2,0,2],[0,0,1]] = [[3n,0,3n],[2,0,2],[0,0,1]]
    """

    # "CUB"     1 Simple cubic
    # "FCC"     2 Face centered cubic
    # "BCC"     3 Body centered cubic
    # "HEX"     4 Hexagonal close packed
    # "TET"     5 Simple tetragonal
    # "BCT"     6 Body centered tetragonal
    # "RHL"     7 Rhombohedral
    # "ORC"     8 Simple orthogonal
    # "ORCC"    9 Base centered orthorhombic
    # "ORCI"    10 Body centered orthorhombic
    # "ORCF"    11 Face centered orthorhombic
    # "MCL"     12 Simple monoclinic
    # "MCLC"    13 Base centered monoclinic
    # "TRI"     14 Triclinic

    if lattice_type == "CUB" or lattice_type == "FCC" or lattice_type == "BCC":
        deformation_types = 'a'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,n,n],[n, n,n],[n,n,n]])
                single_run(deformation_type, deformation_matrix)

    elif lattice_type == "HEX":
        deformation_types = 'ac'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,n,0],[n,n,0],[0,0,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "c":
                deformation_matrix = np.array([[1,1,0],[1,1,0],[0,0,n]])
                single_run(deformation_type, deformation_matrix)

    elif lattice_type == "RHL":                                                             # very confused by rhombohedral lattice
        print("very confused by RHL need to think and write this part")

    elif lattice_type == "TET" or lattice_type == "BCT":
        deformation_types = 'ac'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,n,1],[n,n,1],[n,n,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "c":
                deformation_matrix = np.array([[1,1,n],[1,1,n],[1,1,n]])
                single_run(deformation_type, deformation_matrix)

    elif lattice_type == "ORC" or lattice_type == "ORCC" or lattice_type == "ORCI" or lattice_type == "ORCF":
        # the deformation matrixies I now use should properly cover all 4 types of primitive orthorhombic lattices
        deformation_types = 'abc'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,1,1],[n,1,1],[n,1,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "b":
                deformation_matrix = np.array([[1,n,1],[1,n,1],[1,n,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "c":
                deformation_matrix = np.array([[1,1,n],[1,1,n],[1,1,n]])
                single_run(deformation_type, deformation_matrix)

    elif lattice_type == "MCL" or lattice_type == "MCLC":
        deformation_types = 'abc'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,1,1],[n,1,1],[1,1,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "b":
                deformation_matrix = np.array([[1,n,1],[1,n,1],[1,1,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "c":
                deformation_matrix = np.array([[1,1,1],[1,1,1],[n,n,n]]) # Aflow for some reason is different for a3 = ccosβx^+csinβz so 'a1' and 'a2' are switched leading to 'a' and 'b' being switched
                single_run(deformation_type, deformation_matrix)

    elif lattice_type == "TRI":
        deformation_types = 'abc'
        for deformation_type in deformation_types:
            if deformation_type == "a":
                deformation_matrix = np.array([[n,0,0],[1,1,0],[1,1,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "b":
                deformation_matrix = np.array([[1,0,0],[n,n,0],[1,1,1]])
                single_run(deformation_type, deformation_matrix)
            if deformation_type == "c":
                deformation_matrix = np.array([[1,0,0],[1,1,0],[n,n,n]])
                single_run(deformation_type, deformation_matrix)

    else: print("Error! Unknown Lattice type for "+str(ID))


#--------------------- MAIN PART STARTS HERE ---------------------#

# if os.path.exists(path):    # TEMP for local tests
#     shutil.rmtree(path)     #
# os.makedirs(path)           #
ID = '6998'                 #

### We expect to find a Database folder in parent directory that contains datadir with POSCAR files
poscar_file1 = '../Sample_checks/'+ID+'/undeformed/POSCAR'
# poscar_file2 = '../Sample_checks/'+ID+'/a/POSCAR'
poscar_file2 = '../Sample_checks/'+ID+'/a/POSCAR'

### Take all information from poscar as list of strings:
poscar_content1 = POSCAR_reader.read(poscar_file1)
poscar_content2 = POSCAR_reader.read(poscar_file2)
### Use ase to check if deformations were okay
lattice_matrix1 = np.zeros([3, 3])
for i in range(2, 5):
    lattice_matrix1[i - 2, :] = np.fromstring(poscar_content1[i], dtype=np.float, sep=' ')
read_lattice_matrix1 = geometry.Cell.new(lattice_matrix1)


lattice_matrix2 = np.zeros([3, 3])
for i in range(2, 5):
    lattice_matrix2[i - 2, :] = np.fromstring(poscar_content2[i], dtype=np.float, sep=' ')
read_lattice_matrix2 = geometry.Cell.new(lattice_matrix2)

print(read_lattice_matrix1.cellpar())
print(read_lattice_matrix1.get_bravais_lattice())
print(read_lattice_matrix1.angles())
print('---------------------vs-----------------------')
print(read_lattice_matrix2.cellpar())
print(read_lattice_matrix2.get_bravais_lattice())
print(read_lattice_matrix2.angles())
